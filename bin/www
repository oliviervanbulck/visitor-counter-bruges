#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bruges:server');
//var http = require('http');
var server = require('http').Server(app);
var io = require('socket.io').listen(server);

var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : '192.168.1.100',
  user     : 'visitorcounter',
  password : 'Test1234',
  database : 'visitor_counter'
});

var counter = require('../counter')

counter.io = io;
counter.makeConnectionToDb();

io.sockets.on('connection', function (socket) {
    socket.emit('news', {hello: 'world'});
    socket.emit('userCount', counter.userCount);
    socket.on('my other event', function (data) {
        console.log(data);
    });
    socket.on('reset_counter', function (data) {
        counter.resetCounter();
    });
    socket.emit('waiting_time', function () {
        var data_query = "SELECT * FROM entries WHERE datetime >= DATE_SUB(NOW(),INTERVAL 1 HOUR)";
        this.connection.query(monday_query, function (err, rows, fields) {
            console.log(err);

            var incomings = [];
            var outgoings = [];

            var j = 0;
            console.log(rows);
            while (rows[j]['inorout'] == -1) {
                rows.slice(j);
                j++;
            }
            console.log(rows);

            for (var i = 0; i < rows.length; i++) {
                if (rows[i]['inorout'] == 1)
                    incomings.push(rows[i]['datetime']);
                else
                    outgoings.push(rows[i]['datetime']);
                /*var entryDate = new Date(rows[i]['datetime']);
                 var entryDay = entryDate.getDay();

                 if (entryDay == 1 && rows[i]['inorout'] == 1) { // In JS Monday is 1
                 if ('' + entryDate.getHours() in outputObject) {
                 outputObject['' + entryDate.getHours()]++;
                 } else {
                 outputObject['' + entryDate.getHours()] = 1;
                 //console.log(entryDate.getHours());
                 }
                 }*/
            }
        });
    });
    socket.on('day_popularity', function (data) {
        console.log('New popularity request for day ' + data);
        counter.getDayPopularTimes(data);
    });
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
